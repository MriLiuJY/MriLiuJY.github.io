<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>键盘下的Sao想法</title>
  
  <subtitle>曾在这里写下迷茫中的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iliujy.top/"/>
  <updated>2023-05-17T14:31:25.088Z</updated>
  <id>http://iliujy.top/</id>
  
  <author>
    <name>JYkid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021 年终总结</title>
    <link href="http://iliujy.top/2021/12/01/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://iliujy.top/2021/12/01/2021年终总结/</id>
    <published>2021-12-01T12:53:16.000Z</published>
    <updated>2023-05-17T14:31:25.088Z</updated>
    
    <content type="html"><![CDATA[<p>今年来有比较大的变动，换了工作从阿里离职，纵身一跃从杭州来了厦门，开始做一些除了业务开发之外的完整的前端工程化体系化的东西…</p><a id="more"></a><h2 id="「前言」"><a href="#「前言」" class="headerlink" title="「前言」"></a>「前言」</h2><p>今年是很久以来的第一次主动开始写年终总结的一次了，上一篇还是 <a href="https://mriliujy.github.io/2019/11/29/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">2019年年总结</a>。</p><h2 id="「技术-amp-amp-工作」"><a href="#「技术-amp-amp-工作」" class="headerlink" title="「技术 &amp;&amp; 工作」"></a>「技术 &amp;&amp; 工作」</h2><p>技术上今年来比较发力的方向主要在稳定性、工程化和搭建上。</p><p>从结果上来说，今年完成了一次完整的前端工程化的思考，从一个团队需要什么、日后的发展可能会用到什么，工程化是一个很大很模糊的东西。</p><p>目前对工程化的思考上来看我对工程化的定义更像是 「任何提升前端生产效率和稳定性的方案」都可以归类为工程化的体系。</p><h3 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h3><p>今年以来，目前主要集中精力在 <strong>「API mocks」「utils」「component」「Hooks」「Monitor」</strong> 等前端工程化命题上，以下是针对之前工程化产生的一些整体架构的设计。</p><p><img src="https://cdn.dev-one.cn/D-One.png?imageMogr2/thumbnail/1000x1000"></p><p>产出目前来看都在试用反馈中，今年来主要的目标是完善手上这些工作的收尾，为下一个阶段提供就出的支撑与帮助。</p><p>从工程化的体系上来总结的话就是，今年是一个搭建基础舞台的一年，今年主要做的是前端团队从 0 - 1 的工程化的蜕变，从最原始的复制粘贴到有可复用的物料库，从各个业务线各自实现变成「模块化」的业务场景，可插拔式的帮助业务在各个场景下快速的完成需求。</p><p>在<strong>监控/埋点</strong>体系上我们还做了一点 🤏 不一样的解法，通过自研监控体系的场景我们在业务中不仅填补了前端监控的缺失，还通过开发 Chrome 插件，直接读取当前页面的埋点事件与用户轨迹热力图在页面中还原展示。</p><p>这样监控不仅完成了业务日常使用的诉求，还成为了公司转型商业化面向 C 端用户，帮助业务决策的重要依据，试想一下一个页面直观的展示给你哪个按钮点击的多，哪个地方用户的鼠标停留的时间最长，这不仅仅是最直观的体现也是不断优化帮助业务进步的一大步。</p><p>在工程化的另一侧是从底层一点点的开始搭建完善整个团队的可复用的物料、工具、hooks库，通过将散落在各个业务中的方法和物料收集并完成基础沉淀，这些不仅仅可以将团队从基础的业务开发中解放出来同时也是为 Low Code 搭建的下一步的关键。</p><hr><!-- more --><h2 id="心力"><a href="#心力" class="headerlink" title="心力"></a>心力</h2><p>今年来最大的感受就是感觉身体素质没有跟上，一直很困扰我的是发现自己体能和精力都跟不上了，开始出现明显的焦虑的现象和睡眠质量不佳。</p><p>目前看来情况随着今年换工作的动作有所改善但没有出现明显的完全消失。</p><p>今年来另外的最大的感受就是感觉自己从一个独狼式的开发模式变成团队合作模式的开发，不再是自己扛下所有的东西。总有应接不暇的项目和奇思妙想总能占用我更多的时间和精力，团队合作的模式才是合理分配每个人成长和协调开发的最大的动力。</p><p>对工作模式的改变或许会是围绕着我 2022 年全年的一个基调，毕竟也只有处理好了工作上琐碎的项目才能更好的平衡生活与工作。才能有机会创造出更多更有价值的想法落地。</p><p>在心力的另一个层面上开始逐渐明白「努力」与「自我陶醉」只是给自己一个感觉。</p><p>就像不能单纯的觉得自己这周又来加班了，我对这个项目付出了很多额外的时间，感觉是自己给自己作出的过程定义了「努力表现」的划分。一旦进入自我感动觉得自己已经很努力了的情况下往往会忽视结果与目标是否达成。</p><p>对于日渐增长的年纪和过的越来越快的时间，为<strong>过程鼓掌</strong>和<strong>为结果买单</strong> 显得同样重要。</p><p>总体上而言对 2021 感觉自己更成熟了，从心力上对自己和对客观的认知更成熟，在于会更能接受一些意外的结果，对自我期望的管控做的更好了。</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>关于学习今年还是看了不少的书的,今年阅读的主题主要围绕着 「经济学」与「兴趣」驱使，在整体的规划上完成的进度还不错，基本可以达到在阅读之后保持自己独立思考与落地实践部分书中的概念。</p><ul><li>终身成长</li><li>被讨厌的勇气</li><li>国富论</li><li>经济学原理</li><li>薛兆丰经济学讲义</li><li>被讨厌的勇气</li><li>…</li></ul><p>关于读书这一块以后会在博客中按季度分享自己的读书报告，希望 22 年可以持续的坚持下去。</p><h2 id="艺术"><a href="#艺术" class="headerlink" title="艺术"></a>艺术</h2><p>构建与生活之上的艺术建设同样在今年有了很多的尝试，但是更多的没能坚持下来的雄心壮志…</p><p>今年4月在拿到年终奖之后选择买了 ipad 尝试下绘画 🎨 也爽快的买下 pencil 和 proCreate 准备大干一场的，不过很快就发现入坑的路就如此漫长…</p><p>事实证明可能简单的模仿并不能解决上了年纪又没有绘画功底的入门问题，但对于 ipad 绘画到现在是我仍然保持热情的一件事，希望可以在 2022 可以让我在年中的时候就有图可晒～</p><p>今年的另一项就是 <a href="https://www.yuque.com/jykid/ikid/19819009?artboard_type=artboard&amp;view=&amp;from=" target="_blank" rel="noopener">第一次尝试油画</a>，在打了简单的线稿之后独立完成了剩下的全部工作，不得不说工作室的猫猫真是好好撸，下次还去！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年来有比较大的变动，换了工作从阿里离职，纵身一跃从杭州来了厦门，开始做一些除了业务开发之外的完整的前端工程化体系化的东西…&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="http://iliujy.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>为什么我选择了企业级中后台组件库</title>
    <link href="http://iliujy.top/2021/10/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E9%80%89%E6%8B%A9%E4%BA%86%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    <id>http://iliujy.top/2021/10/28/为什么我选择了企业级中后台组件库/</id>
    <published>2021-10-28T07:12:23.000Z</published>
    <updated>2023-05-17T01:42:54.009Z</updated>
    
    <content type="html"><![CDATA[<p>近期在做团队组件库的方案建设与推广，关于为什么没有使用当前市面上大热的 <code>Antd</code> 等组件库而是选择企业级组件库的一些思考 🤔</p><a id="more"></a><h2 id="我们面临的问题"><a href="#我们面临的问题" class="headerlink" title="我们面临的问题"></a>我们面临的问题</h2><p>团队近来的发展迅猛，前端的队伍从开始的 1-2 人发展到目前数十人的规模，业务上也从原来的两个产品变成多条产品线共同发展发力，今年是团队与公司都很关键的一年。</p><p>但，在团队与业务都快速扩张的背景下我们却遇到了和其他每一个团队都曾遇到的问题 — 前端工程化</p><p>工程化的缺失使得之前团队规模还小的时候在遇到重复的组件与开发任务的时候选择更倾向于单兵作战的解决手头上的问题，于是重复的开发和复制粘贴后稍加修改解决了之前面临的大部分问题。</p><p>但是现在团队与业务规模的扩张使得我们面临的问题不再是简单的复制粘贴与单兵作战所能解决的问题，「体验一致性」、「规模化的业务 UI」、「最佳模式」、「未来会产生的需求」等已经急待解决。</p><h3 id="「体验一致性」"><a href="#「体验一致性」" class="headerlink" title="「体验一致性」"></a>「体验一致性」</h3><p>团队发展至今已经初具规模且分布在全部各个办事处均有研发同学，也连带着各个业务线背后的设计资源与 产品、测试 同学对业务视角不同的思考和诉求。</p><p>在业务中彼此配合和需要协作沟通确认的体验与细节占据了很大一部分细节问题，从整个公司层面急需一个完善的中后台业务设计体系出来统一整个产品矩阵的体验，也引出了前端团队统一各个业务线的体验的诉求。</p><p>同时统一的体验与组件还可以反过来可以使产品与设计同学更多的参考现有的组件，对每一处必须的修改与拓展有明确的价值，从而约束那些过多的 “创意”。</p><h3 id="「规模化的业务-UI」"><a href="#「规模化的业务-UI」" class="headerlink" title="「规模化的业务 UI」"></a>「规模化的业务 UI」</h3><p>随着公司业务的扩张，前端的研发任务已经不单单是原先的 1-2 个中后台与 BFF 的同学一起联调发布页面这么简单的任务这么简单。</p><p>我们在业务上面临更多的大客户定制诉求与拓展的 【私有化】、【国际化】、【业务多元化发展】的诉求，从原先的单一产品线发展到不同的产品诉求在团队中都有高优先级的诉求。在业务发展的同时也对前端团队的需求吞吐能力有了更高的要求。</p><p>在此背景下大量的需求需要通过各种方法提高整体研发同学的效率与需求吞吐率解决，一套经过公司业务沉淀的组件库可以大大的减少目前前端团队对业务组件重复研发的问题和快速帮助研发提升研发效率。</p><p>规模化业务的另一大问题是有大量相似或重复的业务场景，例如列表与表格，通过不断的业务精炼与拆解，大量的业务诉求其实可以被抽象成模块与最佳实践。</p><p>在规模化的背景与快速迭代的需求下，不断沉淀的企业级组件库对前端的研发同学提供有力的支撑。</p><h3 id="未来的需求"><a href="#未来的需求" class="headerlink" title="未来的需求"></a>未来的需求</h3><p>业务在加速发展的过程中不仅仅是业务迭代速度与业务开发量上去了，而是从根本上由原来的 「稳定的产品迭代」 变成现在加速的「产品研发与扩张」</p><p>在原来可以一期期迭代中完成的诉求现在变得需要团队以 「<strong>发展</strong>」的视角去审视当前的需求和团队的协作配合。</p><p>例如一个项目启动的时候如何做到中后台的「自适应布局」、一件换肤完成「产品色」的替换、支持「私有化部署」、快速便捷的支持「国际化」</p><p>这些现阶段还没有提出的需求或许不会影响到当前前端同学的研发进度，但如果没有发展的眼光应对这些「未来的需求」就会导致最后真的需求来的时候投入更多的研发资源与更差的迭代体验感。</p><p>主动的审视这些未来可能产生的需求是前端研发素质的体现，同时良好的团队合作和与 PD 及时的沟通会让每一次参与开发的同学对未来产品的迭代有更清晰的认知与规划。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>面对团队与业务在发展的过程中出现的问题我们足以分析之后似乎我们面临的问题已经逐渐清晰了。</p><p>最终在对比市面上多套企业级中后台组件的方案中选择 <code>Fusion</code> 作为现阶段团队在工程化上踏出的第一步☝️ 原因有下：</p><ul><li>开箱即用的基础组件</li><li>完善的业务组件研发 &amp; 发布 流程</li><li>配套独立站点与文档使得组件落地的成本降到很低</li><li>block 的引入使得业务上最佳模式与沉淀有了落地的方式</li><li>借助 <code>iceworks</code> 工具低成本的完成从 0-1 的启动流程与近乎完善的使用体验</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期在做团队组件库的方案建设与推广，关于为什么没有使用当前市面上大热的 &lt;code&gt;Antd&lt;/code&gt; 等组件库而是选择企业级组件库的一些思考 🤔&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://iliujy.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="组件" scheme="http://iliujy.top/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>为什么我们总说POST比GET安全</title>
    <link href="http://iliujy.top/2020/03/25/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E6%80%BB%E8%AF%B4POST%E6%AF%94GET%E5%AE%89%E5%85%A8/"/>
    <id>http://iliujy.top/2020/03/25/为什么我们总说POST比GET安全/</id>
    <published>2020-03-25T15:20:21.000Z</published>
    <updated>2021-10-28T08:24:36.879Z</updated>
    
    <content type="html"><![CDATA[<p>为什么我们总在说 <code>POST</code> 比 GET 安全，那么到底安全在哪里呢？是只有面试题上洋洋洒洒罗列的那些问题么。</p><a id="more"></a><p>为什么我们总在说 POST 比 GET  安全，那么到底安全在哪里呢？是只有面试题上洋洋洒洒罗列的那些问题么。</p><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>这个问题的起源是小伙伴在面试的时候问候选人 “ POST 与 GET 的差异，然后提到了 POST 比 GET 安全”，然后前端小组内由 PSOT 比 GET 安全在哪些地方进行了充分的讨论。</p><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>那我们先来看看普通版本的面试题答案，POST 比 GET 的优势：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET 请求参数是放在 URL 上，有长度的限制，POST 没有</span><br><span class="line">对参数数据类型，GET 只接受 ASCII 字符，而 POST 没有限制</span><br><span class="line">GET 请求会被浏览器缓存造成意外的问题，而 POST 除非手动设置否则不会</span><br><span class="line">GET 请求重放的时候不会对用户进行提示，POST 会弹窗提示，</span><br><span class="line">POST 会比 GET 请求安全，因为在参数在 body 中而不是 URL 上...</span><br></pre></td></tr></table></figure><p>那么我们一起来看看，到底为什么 POST 会比 GET 安全。</p><p>首先我们来看一个场景，萌新入职第一天愉快的登陆了 A网站 完成了注册登陆大礼包。<br>这时候老司机想看看萌新的安全意识直接丢了一个神秘链接给萌新，萌新开心的打开，突然发现页面 CSRF 四个大字在页面上。</p><p>萌新一脸无辜赶紧请教老司机，老司机不疾不徐的道来： “刚你在 A网站进行了登陆，这个时候服务端会给你设置一个cookie，这里cookie会存在浏览器本地，在有效期内同源的请求都会默认携带上这个cookie。我就是利用了这一点对你完成了 CSRF 的跨站脚本攻击”。</p><p>“可是什么究竟什么是跨站脚本攻击呢？”</p><p>CSRF（Cross-site request forgery）跨站请求伪造：即为在第三方网站中，向被攻击网站发送跨站请求。利用浏览本地存储的被攻击网站的cookie，绕过服务端的验证，达到冒充用户的目的。<br>“那么 CSRF 与 POST 更安全有什么关系呢？”</p><p>我们来展示一个简单的 demo 被攻击网站：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>被攻击网站<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>被攻击网站<span class="tag">&lt;/<span class="name">p</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">"POST"</span>, <span class="string">"http://localhost:3000"</span>);</span></span><br><span class="line"><span class="javascript">    xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/xml"</span>);</span></span><br><span class="line"><span class="undefined">    xhr.send();</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.all(<span class="string">"*"</span>, (req,res,next) =&gt; &#123;</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"http://localhost:3000"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Headers"</span>,<span class="string">"Origin, X-Requested-With, Content-Type, Accept, "</span> + <span class="string">"WG-App-Version, WG-Device-Id, WG-Network-Type, WG-Vendor, WG-OS-Type, WG-OS-Version, WG-Device-Model, WG-CPU, WG-Sid, WG-App-Id, WG-Token"</span>);</span><br><span class="line">  res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"DELETE,PUT,POST,GET,OPTIONS"</span>);</span><br><span class="line">  <span class="keyword">if</span> (req.method.toLowerCase() == <span class="string">'options'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"i get a option request"</span>)</span><br><span class="line">    res.send(<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回被攻击网站html</span></span><br><span class="line">app.get(<span class="string">'/index'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> filename = <span class="string">"./index.html"</span>;</span><br><span class="line">  fs.readFile(filename, (err, result) =&gt; &#123;</span><br><span class="line">    res.set(<span class="string">"content-type"</span>, <span class="string">"text/html"</span>);</span><br><span class="line">    res.send(result);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">app.all(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers.referer)</span><br><span class="line">  <span class="keyword">if</span> (req.headers.referer !== <span class="string">"http://localhost:3001/csrf.html"</span>) &#123;</span><br><span class="line">    res.cookie(<span class="string">'isVisit'</span>, <span class="number">12345</span>, &#123;<span class="attr">maxAge</span>: <span class="number">60</span> * <span class="number">1000</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">test</span>: <span class="string">"test"</span>&#125;))</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(port, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>!`</span>))</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// csrf.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>csrf<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>攻击网站<span class="tag">&lt;/<span class="name">p</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt; <span class="attr">img</span> <span class="attr">src</span>=<span class="string">"http://localhost:3000"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单来说就是启动一个被攻击网站，然后攻击网站利用 image 发送一个 GET 请求来窃取用户的 cookie 达到CSRF攻击的目的。</p><p>那 POST 相较 GET 更安全那我们就要看 POST 与 GET 的区别了。</p><p>首先 GET 请求发送没有同源策略的限制，在任意的域名下都会直接发起请求，而POST请求在跨域的情况下会先发一个 OPTION 请求到服务端探寻是否允许跨域，如果服务端的设置的 Access-Control-Allow-Origin 没有设置 * 或者允许特定的域名的情况下。比如你的服务端仅设置  Access-Control-Allow-Origin: <a href="http://www.a.com" target="_blank" rel="noopener">http://www.a.com</a> 那么你在 <a href="http://www.b.com" target="_blank" rel="noopener">http://www.b.com</a> 的域名下发送一个 POST 请求会先发出一个 OPTION 的请求来探测服务端是否允许跨域。如果服务端设置的 Access-Control-Allow-Origin没有当前域名的话则POST 的请求主体则不会发送。这样的差异在服务端的差异就变成了 GTE 请求在服务端会直接收到请求并按照正常请求的逻辑去处理，而  POST 请求业务上会变成在跨域的时候仅会发送 OPTION 请求服务端并不会处理具体的业务逻辑，且 OPTION 请求并不会携带 cookie 。</p><p>从这个方面我们可以看出在跨域的情况下 <code>POST</code> 请求因为会预发一个 OPTION 请求从而避免像  GET 请求一样被恶意窃取 cookie 。 </p><p>GET请求究竟有哪些缺陷？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 在低版本浏览器上GET请求会被缓存，造成意外的结果。</span><br><span class="line">2. JSONP实现的GET请求天然存在被XSS的风险</span><br><span class="line">3. GET请求会被缓存，造成意外的返回值。</span><br><span class="line">4. GET请求URL长度限制</span><br><span class="line">5. GET请求参数类型限制（GET仅能接受ASCII）</span><br></pre></td></tr></table></figure></p><p>PSOT好在哪里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. POST在跨域的时候会先发一个option请求检查服务端是否允许跨域。（CORS跨站脚本攻击）</span><br><span class="line">2. POST参数无类型/大小限制</span><br><span class="line">3. 重放POST请求的时候会提示用户。</span><br><span class="line">4. POST在设置 csrfToken 放置在header中不会被窃取。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么我们总在说 &lt;code&gt;POST&lt;/code&gt; 比 GET 安全，那么到底安全在哪里呢？是只有面试题上洋洋洒洒罗列的那些问题么。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://iliujy.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第22期</title>
    <link href="http://iliujy.top/2020/03/10/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC22%E6%9C%9F/"/>
    <id>http://iliujy.top/2020/03/10/每周分享第22期/</id>
    <published>2020-03-10T13:17:34.000Z</published>
    <updated>2021-10-28T08:24:36.890Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎<a href="https://github.com/MriLiuJY/MriLiuJY.github.io" target="_blank" rel="noopener">投稿</a>提交Issue。</p><a id="more"></a><p>中国时间 2020-03-09 美国股市发生历史上第二次熔断。这是美国自1988年2月熔断机制出台，第二次触发熔断机制。上一次是 1997年10月27日，道琼斯工业指数暴跌7.18%，这一天，也是熔断机制在1988年引入之后第一次被触发。而这次 道琼斯工业指数深跌7.79%。</p><p>在这成为历史性的一刻的背后，是沙特与俄罗斯在 OPEC+ 维持减产问题上的分歧导致的谈判破裂，俄罗斯拒绝了OPEC每天减产150万桶的提议，这意味着从4月1号当前的减产协议到期开始，每个产油国实际上都可以自由调整本国的石油产量。随即沙特宣布 <strong>降价 + 减产</strong> ，俄罗斯在随后表示俄方可接受35 - 40 美元油价长期维持 6 - 10 年并且可随时动用1500亿国家财富基金维持国内经济。</p><p>一场夹杂在疫情中的全球流动性资产恐慌正在各国的股市蔓延。</p><h1 id="一句话分享"><a href="#一句话分享" class="headerlink" title="一句话分享"></a>一句话分享</h1><p>关于2020还是有一些想分享的。</p><ol><li><p>浪潮退去之后，才会知道谁在裸泳。</p></li><li><p>不要把鸡蛋放在一个篮子里</p></li></ol><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>《剩女》：这部纪录片里，Mei、Min、Qi遇到的问题分别代表了单身女性面临的传统观念、父母干涉与道德绑架、以及对婚姻的妥协让步。社会就是面镜子，从中能看出些什么，我们又面临着什么。</p><h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><p>本篇是断更了好久久之后的第一篇每周分享系列。2020 想拔掉立下的 flag 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎&lt;a href=&quot;https://github.com/MriLiuJY/MriLiuJY.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;投稿&lt;/a&gt;提交Issue。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://iliujy.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>2019年终总结</title>
    <link href="http://iliujy.top/2019/11/29/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://iliujy.top/2019/11/29/2019年终总结/</id>
    <published>2019-11-29T14:10:43.000Z</published>
    <updated>2021-10-28T08:24:36.877Z</updated>
    
    <content type="html"><![CDATA[<p>这是第一次提前了一个月起草了今年的年终总结，不是因为有了点小成就，而是我怕我写下的都是不痛不痒的文字。</p><a id="more"></a><p>回想这一年，虽然一直在路上，思考慢了许多，开始感受到自己的每一个决定开始变得受制</p><p>经历很多有趣的同事兼朋友的分别，一起愉快的约饭越来越少了。</p><p>4月份开始就断更了每周分享。</p><p>做了一个报错监控的 <a href="https://github.com/MriLiuJY/monitorFE" target="_blank" rel="noopener">开源项目</a>，收获了一些star。</p><p>也在19年加入了阿里巴巴政务钉钉事业部，进入了政务领域的开发与探索的方向。</p><p>看了十好几本书，</p><p>你看上面罗列的林林总总，总像是不断的告诉自己你这年过得还不赖。</p><p>但其实呢，人是由多个身份构成的，不是单一的角色。</p><p>从程序员的角度上看，终于我进入一个大厂开始打怪升级，拿到了在中国实现阶级跨越年薪百万的起始账号。</p><p>从个人的角度上来说 阿里巴巴真的比之前的公司拼太多了，马云之前说的 <code>996</code> 是福报，现在还真的会觉得9点下班就很早了。</p><p>从家庭的角度，今年来杭州了之后只感觉日月如梭。不知今昔是何年的感觉，每天都有事每天都很忙，与家庭的联系也变少了。</p><p>开始有更多的想要生活的想法，想要更多的成长，想要更多的时间，想要更多的自由。</p><p>而不是凌晨一点的电话与每周的周报，令人窒息的 KPI 考核。</p><p>不知道从那一天开始，暗自下定决心</p><p>却又从未执行。</p><p>真的。</p><p>疲惫感每天涌来的时候都扛不住的想睡，我觉得我深陷泥潭。</p><p>生活上面从来杭州之后却几乎没有出过门。</p><p>连最基本的一些景区都一推再推，我不知道是否是完全失去了生活。</p><p>但</p><p>这一定不是我想要的生活。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是第一次提前了一个月起草了今年的年终总结，不是因为有了点小成就，而是我怕我写下的都是不痛不痒的文字。&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="http://iliujy.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>停滞的不应是思想</title>
    <link href="http://iliujy.top/2019/11/07/%E5%81%9C%E6%BB%9E%E7%9A%84%E4%B8%8D%E5%BA%94%E6%98%AF%E6%80%9D%E6%83%B3/"/>
    <id>http://iliujy.top/2019/11/07/停滞的不应是思想/</id>
    <published>2019-11-07T03:54:59.000Z</published>
    <updated>2021-10-28T08:24:36.881Z</updated>
    
    <content type="html"><![CDATA[<p>最近和朋友聊到了一部网飞的纪录片《黄之锋传》。其大体的故事就是讲述占中带头人之一的黄之锋从14岁开始宣扬的港独纪录片。</p><a id="more"></a><p>朋友聊到一个观点很羡慕黄之锋在14岁时可以有不一样的选择可以出来选择抗议。可以发出不一样的声音。在相对民主的环境下有能够表达自己想法的机会与舞台。</p><p>有机会成为不一样的群体中不一样的一员，其中有的选很让人羡慕。</p><p><strong>“至少他们还有的选”</strong> 朋友说到。</p><p>但是我觉得更多的只要看到背后的问题。就像我们不能单纯讲一个商品的好坏，做对比的话至少得从多方面来看。</p><p><strong>了解的少了可能就会看不全</strong>，也会在之后的时间无论多久总归是会留下一点小遗憾。</p><p>所以我们应当全面的去看待一个问题，以及看到问题背后所连带的一些东西，再去谈羡慕与否。</p><p>诚然香港的自由是全世界都为之倾倒，这样一个自由的城市人们不禁可以表达自己的观点甚至可以合法的从事间谍活动。</p><p><strong>但我们也应该看到这份自由背后的付出</strong></p><p>香港是全世界房价最高的地区之一，这种畸形的房价几乎挤压了整个香港的活力。</p><p><strong>把香港近乎所有的年轻人都逼迫到一个角落</strong>。</p><p>高昂的房价不仅绑架了经济也压碎了整个社会的流动性。贫穷家庭的年轻人一辈子都无法完成阶级跨越。他们不仅买不起房，活在这种高房价抬升的社会生活成本之上就得拼尽全力了。</p><p><strong>这背后不仅是香港做为亚洲四小龙，也是全球经济中心发展所带来的问题，同样的也是因为在 ‘小政府’ 管控下香港的资本肆意的抬高土地房产价值所带来的结果。</strong></p><p>香港开放的经济环境与政府在对涉及民生项目问题上的管控与推进的时候，一步步的被香港所谓的 <strong>“自由”</strong> 逼迫到了这种地步。</p><p>香港曾有个电视节目叫《穷翁大作战》讲述的就是社会下层即使拼尽全力也只能在温饱线挣扎的问题。</p><p>我并不是在论述香港的经济、民生问题。而是香港在这种高度自由下不仅给普通民众提供了上街抗议的权利，也让资本在这种自由下不断的钻空子发展。</p><p>港府不止一次的尝试修建公租房解决高房价的问题，但是最后都在资本的干扰下被迫终止。</p><p>香港的年轻人怎么看得到希望。</p><p>我们在羡慕这种自由的时候也应看清楚我们享受的自由。大多数人的成长都是伴随中国的成长一路起来的。</p><p>不需要聊更多的，我至少没住在10平米的當房中，我有一个可以在考好了提愿望的童年，我不必操心温饱问题。等等</p><p><strong>我还有一个现在仍然看得到希望的可能。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近和朋友聊到了一部网飞的纪录片《黄之锋传》。其大体的故事就是讲述占中带头人之一的黄之锋从14岁开始宣扬的港独纪录片。&lt;/p&gt;
    
    </summary>
    
    
      <category term="观点" scheme="http://iliujy.top/tags/%E8%A7%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第21期</title>
    <link href="http://iliujy.top/2019/09/23/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC21%E6%9C%9F/"/>
    <id>http://iliujy.top/2019/09/23/每周分享第21期/</id>
    <published>2019-09-23T10:38:58.000Z</published>
    <updated>2021-10-28T08:24:36.889Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎<a href="https://github.com/MriLiuJY/MriLiuJY.github.io" target="_blank" rel="noopener">投稿</a>提交Issue。</p><a id="more"></a><h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><p>【马云：农村很重要】马云在第七届中国淘宝村高峰论坛上表示，这是我最后一次以阿里巴巴董事长的身份来参加活动，因为我认为农村很重要。</p><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p>webassembly： 最近在做 SDK 的 webassembly 的尝试，首先提出并尝试了 使用 assemblyScript 的方式来改造升级我们的代码中 AES 和 RSA 的加密算法。但是最近在尝试中发现 assemblyScript 的语法要求比 TypeScript 高很多。在做技术升级的时候几乎无法做到完全的无痛升级的特点，所以在开发中无奈只能尝试将 js 代码一点点的迁移到 assemblyScript 的要求规则中。但这种成本和解决方法却又与最初选择的另外一条路 使用 Emscripten 编译 c/c++ 的路差不多的付出。选择学习实践新技术的时候往往也还会因为现在的社区的不成熟与干货的缺失造成更高的学习成本。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>这里分享本周我看的一些电影/书籍和一些感受</p><p>《天地玄黄》：纪录片，全程没有一句人物对白或旁白在内，但以独特的镜头语言介绍了这个多彩的世界。</p><p>《睡前消息》系列：观视频工作室出品的一款事实新闻评论节目，该节目以独特的角度和丰富的知识内容解读一些新闻中有趣的点，分享不一样的观点。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎&lt;a href=&quot;https://github.com/MriLiuJY/MriLiuJY.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;投稿&lt;/a&gt;提交Issue。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://iliujy.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第20期</title>
    <link href="http://iliujy.top/2019/08/31/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC20%E6%9C%9F/"/>
    <id>http://iliujy.top/2019/08/31/每周分享第20期/</id>
    <published>2019-08-31T03:52:26.000Z</published>
    <updated>2021-10-28T08:24:36.889Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎<a href="https://github.com/MriLiuJY/MriLiuJY.github.io" target="_blank" rel="noopener">投稿</a>提交Issue。</p><a id="more"></a><h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><p>【马云：农村很重要】马云在第七届中国淘宝村高峰论坛上表示，这是我最后一次以阿里巴巴董事长的身份来参加活动，因为我认为农村很重要。</p><p>【苏宁拼购推出“拼购村”扶持政策：直播带货和苏宁推客】为扶持“拼购村”发展，苏宁拼购向商户下发具体流量扶持政策，即直播带货和苏宁推客。据官方介绍，入选“拼购村”的商户，将有机会把自己的产品带到快手小店、榴莲视频，利用与苏宁签约的网红直播带货。苏宁推客依托于社群裂变传播的模式，挖掘推客个人的私域流量。据统计，一名推客平均可以撬动14个订单。</p><p>【《中国淘宝村研究报告》：过去一年淘宝村、镇网店年销售额合计超过7000亿元】据《中国淘宝村研究报告（2009-2019）》，中国淘宝村数量从3个增加到4310个，淘宝镇数量达到1118个，覆盖2.5亿人口。过去一年，全国淘宝村和淘宝镇网店年销售额合计超过7000亿元，在全国农村网络零售额中占比接近50%，带动就业机会超过683万个。《报告》预计，下一个十年，全国淘宝村将超过2万个，带动超过2000万的就业机会。</p><p>最近各大电商平台的报告和未来的发展方向上来看，中国农村电商经济经过拼多多的验证之后格外的诱人，之前有统计数据，中国现在还有10亿人没有坐过飞机，5亿人没有用过马桶。从长远来看中国经济发展还有巨大的潜力，其中潜力最大的就是中国人口分布最多的农村人口，如何做好农村消费升级给上亿中国人带来世界发展的便利，谁将能在未来的发展中获得更好的先机。</p><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p><a href="https://segmentfault.com/a/1190000018709009" target="_blank" rel="noopener">CSP——前端安全第一道防线</a> CSP是前端安全策略中很实用的一部分，用来防止恶意加载第三方资源，阻止 XSS 攻击上都有很不错的表现。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>这里分享本周我看的一些电影/书籍和一些感受</p><p>《大空头》：讲述华尔街造成的美国次贷危机与一群敏锐的观察到经济危机的投资者大赚其钱的故事。</p><h1 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h1><p>you work you hard, you easy you go.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎&lt;a href=&quot;https://github.com/MriLiuJY/MriLiuJY.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;投稿&lt;/a&gt;提交Issue。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://iliujy.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>经济增长周期</title>
    <link href="http://iliujy.top/2019/08/16/%E7%BB%8F%E6%B5%8E%E5%A2%9E%E9%95%BF%E5%91%A8%E6%9C%9F/"/>
    <id>http://iliujy.top/2019/08/16/经济增长周期/</id>
    <published>2019-08-16T01:05:27.000Z</published>
    <updated>2021-10-28T08:24:36.892Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>报错监控-监控Promise错误</title>
    <link href="http://iliujy.top/2019/07/17/%E6%8A%A5%E9%94%99%E7%9B%91%E6%8E%A7-%E7%9B%91%E6%8E%A7Promise%E9%94%99%E8%AF%AF/"/>
    <id>http://iliujy.top/2019/07/17/报错监控-监控Promise错误/</id>
    <published>2019-07-17T02:13:53.000Z</published>
    <updated>2021-10-28T08:24:36.884Z</updated>
    
    <content type="html"><![CDATA[<p>上次我们聊过了前端监控 JS 执行错误和第三方资源加载异常的监控，那么这次来聊聊如何捕获 <code>Promise</code> 错误。</p><a id="more"></a><p>首先先安利下自己做的报错监控的项目 <a href="https://github.com/MriLiuJY/monitorFE" target="_blank" rel="noopener">FE-Monitor</a> 欢迎 issue 和 star 。</p><p><code>Promise</code> 在前端中的使用已经非常普遍了，但是许多开发者或许习惯了链式调用却忘了捕获 <code>Promise</code> 的错误了。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forgetCatchError</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">async</span>()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// code..</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'forget catch error!'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的示例代码中 <code>async()</code> 中和后续的两个 <code>then</code> 中的代码如果出错或者 reject ，错误没有得到处理。</p><p>在没有使用 <code>catch</code> 方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。当promise被 reject 并且错误信息没有被处理的时候，会抛出 unhandledrejection，这个错误不会被 <code>window.onerror</code> 和 <code>addEventListener(&quot;error&quot;)</code> 所监听到。</p><h1 id="使用-unhandledrejection"><a href="#使用-unhandledrejection" class="headerlink" title="使用 unhandledrejection"></a>使用 unhandledrejection</h1><p>对 <code>unhandledrejection</code> 事件进行监听即可捕捉到未被 <code>catch</code> 的 Promise 错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"unhandledrejection"</span>, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err.reason)</span><br><span class="line"></span><br><span class="line">  err.preventDefault();</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 或者</span></span><br><span class="line"> <span class="built_in">window</span>.onunhandledrejection = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err.reason);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>addEventListener</code> 中调用 event 的 <code>preventDefault()</code> 可以让 Promise 的错误不抛送到控制台，在 <code>onunhandledrejection</code> 中则可以使用 <code>return true</code> 来达到相同的效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次我们聊过了前端监控 JS 执行错误和第三方资源加载异常的监控，那么这次来聊聊如何捕获 &lt;code&gt;Promise&lt;/code&gt; 错误。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://iliujy.top/tags/JS/"/>
    
      <category term="前端" scheme="http://iliujy.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端埋点 – 报错监控</title>
    <link href="http://iliujy.top/2019/07/16/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9-%E2%80%93-%E6%8A%A5%E9%94%99%E7%9B%91%E6%8E%A7/"/>
    <id>http://iliujy.top/2019/07/16/前端埋点-–-报错监控/</id>
    <published>2019-07-16T02:45:08.000Z</published>
    <updated>2021-10-28T08:24:36.881Z</updated>
    
    <content type="html"><![CDATA[<p>说起埋点又到了谈起前端项目中数据收集与监控，那么今天来简单的聊下前端报错监控的埋点。</p><a id="more"></a><p>首先先安利下自己做的报错监控的项目 <a href="https://github.com/MriLiuJY/FE-Monitor" target="_blank" rel="noopener">FE-Monitor</a> 欢迎 issue 和 star 。</p><p>首先我们可以看下前端做报错监控的意义在哪里：</p><ul><li>帮助灰度测试发现问题</li><li>收集线上错误日志</li><li>帮助优化产品稳定性</li><li>收集错误数据用于分析</li><li>监控第三方资源/CDN 稳定性</li></ul><p>总体来说前端监控的主要目的都是为了获取用户行为以及跟踪产品在用户端的使用情况，并以监控数据为基础，指明产品优化方向。</p><h1 id="常见监控方式"><a href="#常见监控方式" class="headerlink" title="常见监控方式"></a>常见监控方式</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    test code  <span class="comment">// throw error</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码在项目中很常见，一般用来捕获某一段可能代码抛出的错误信息。并且在try catch 中的错误并不会阻塞整个页面，即使发生错误，页面也可以继续执行。</p><p>当然，我们不太可能对这个项目中的每一段代码都添加 try catch，这样不仅不利于线上定位问题产生的原因，也会让代码难以维护，目前主流的就是在项目中独立引入一个报错监控的 JS 来单独的完成对整个项目的监控。</p><p>比如 <a href="https://github.com/MriLiuJY/FE-Monitor" target="_blank" rel="noopener">FE-Monitor</a> 就提供开源的项目报错监控的能力，只需要将 SDK 引入自己的项目中，即可监控整个项目的js执行报错，资源加载异常，ajax错误等信息了。</p><h1 id="ajax-错误监控"><a href="#ajax-错误监控" class="headerlink" title="ajax 错误监控"></a>ajax 错误监控</h1><p>ajax 的错误监控主要是为了发现服务接口返回值的问题。</p><p>看了一些产品的实现都是对 window 下的 <code>XMLHttpRequest</code> 重写，但是这样直接重写不仅会造成调用链的修改也会让宿主页面上的多个 ajax 库产生冲突，如使用了 jquery 的话 jquery 中是直接使用 <code>XMLHttpRequest</code> 对象的。如果修改了全局的对象中的属性可能会造成以外的影响。</p><p>用了一种特殊的方式去实现对 <code>XMLHttpRequest</code> 对象的监听。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">_initListenAjax: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajaxEventTrigger</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ajaxEvent = <span class="keyword">new</span> CustomEvent(event, &#123; <span class="attr">detail</span>: <span class="keyword">this</span> &#125;);</span><br><span class="line">      <span class="built_in">window</span>.dispatchEvent(ajaxEvent);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> oldXHR = <span class="built_in">window</span>.XMLHttpRequest;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">newXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> realXHR = <span class="keyword">new</span> oldXHR();</span><br><span class="line">      realXHR.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$event</span>) </span>&#123;</span><br><span class="line">        ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxLoad'</span>);</span><br><span class="line">      &#125;, <span class="literal">false</span>);</span><br><span class="line">      realXHR.addEventListener(<span class="string">'timeout'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxTimeout'</span>);</span><br><span class="line">      &#125;, <span class="literal">false</span>);</span><br><span class="line">      realXHR.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ajaxEventTrigger.call(<span class="keyword">this</span>, <span class="string">'ajaxReadyStateChange'</span>);</span><br><span class="line">      &#125;, <span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">return</span> realXHR;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">window</span>.XMLHttpRequest = newXHR;</span><br><span class="line">     self._startLintenAjax();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这样做不仅可以一经调用就监控到页面的错误，不会出现重写 <code>window.onerror</code> 的时候第一次错误监控不到的情况还需要重写 <code>console.error</code> 函数才可以监听到。</p><h1 id="error错误监控"><a href="#error错误监控" class="headerlink" title="error错误监控"></a>error错误监控</h1><p>错误监控中对 <code>error</code> 事件的监控是最重要的，监听 error 的事件主要是为了发现 js 执行中抛错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      getError(err, self._config);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>监控 error 报错的情况中，最 error 的处理中要判断是否是我们设置的埋点接口的 URL 所抛错的。主要是为了避免在埋点服务宕机的情况下出现重复请求上报，造成页面卡死的情况。</p><h1 id="监控资源加载异常"><a href="#监控资源加载异常" class="headerlink" title="监控资源加载异常"></a>监控资源加载异常</h1><p>页面上有很多的外部的资源，一般来说对资源的加载的监控是在资源标签添加 <code>onerror</code> 的方法来监听加载错误信息。</p><p>这种做法和对js 代码添加 try catch一样，需要对每个资源都不断的添加监控。</p><p>对比之后 使用 <code>addEventListener</code> 监控整体的项目资源加载更方便快捷。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      getError(err, self._config);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>其中 <code>addEventListener</code> 方法中的第三个参数是 useCapture，如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在目标或冒泡阶段处理事件。 如果useCapture 为 false，则侦听器只在目标或冒泡阶段处理事件。</p><p>其中回调函数中接受的 err 中有 <code>cancelable</code> 属性的是js执行错误，所以可以通过 err 上时候有 <code>cancelable</code> 属性来判断不同类型的错误。</p><h1 id="Promise-错误"><a href="#Promise-错误" class="headerlink" title="Promise 错误"></a>Promise 错误</h1><p>Promise 错误在项目中也是时常会遇到的，一般来说在 Promise 的结尾都是会写上一个 catch 来捕获 Promise 产生的错误。</p><p>但是很多的时候开发者忽略捕捉 Promise 的错误，这时错误会一直向上抛出到最顶层。</p><p>监听unhandledrejection事件，即可捕获到未处理的Promise错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;unhandledrejection&apos;, event =&gt; ···);</span><br></pre></td></tr></table></figure><p>在项目中使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&quot;unhandledrejection&quot;, function(err)&#123;</span><br><span class="line">      getError(err, self._config);</span><br><span class="line">      return true;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>在 FE-Monitor 中监控了 Promise 报错。可以捕获未被捕捉到的错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说起埋点又到了谈起前端项目中数据收集与监控，那么今天来简单的聊下前端报错监控的埋点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://iliujy.top/tags/JS/"/>
    
      <category term="前端" scheme="http://iliujy.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>2019年中总结</title>
    <link href="http://iliujy.top/2019/06/12/2019%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
    <id>http://iliujy.top/2019/06/12/2019年中总结/</id>
    <published>2019-06-12T01:50:31.000Z</published>
    <updated>2021-10-28T08:24:36.877Z</updated>
    
    <content type="html"><![CDATA[<p>时间来到了2019年中，又是一篇年中总结。我曾想过要不就不写了，反正自己的小破站又没啥流量，拖了也没人催更…</p><a id="more"></a><p>说起来，上半年坚持的 <code>weekly blog</code> 已经断更2个多月了，落起来没来得及看的技术书已经比电脑显示器还高了。</p><p>突然发现有点想不出这半年来自己干了写什么值得总结的事。</p><p>但至少我知道我尝试了 <code>新媒体</code>，玩了 <code>闲鱼</code> ，也做了 <code>外包</code> 最后发现其实即使是自己投入了很多的精力也不一定有收获的事真的挺让人垂头丧气的。</p><p>这半年中比以往的每一天我更多的问自己，究竟自己想要什么。</p><p>以前经常和别人开玩笑说我是拯救世界的小哥哥，现在每一天忙完了更多的是想躺在床上当咸鱼。</p><p>那种疲惫感从某一天晚上突然打败了我。</p><p>我开始慢慢的逃避，我觉得 <code>weekly blog</code> 晚一天更新没什么，我觉得每天早上多睡一个小时而不是起来写一篇文章、发布一部视频更让当下的我有更多的收获，我觉得晚一会看这个视频不会让我在技术上落后别人多少。</p><p>就这样渐渐的开始放逐自己，突然有一天我发现自己在一个闭塞的盒子中太久没有呼吸。</p><p>就像困在大山深处的孩子不曾见过外面的世界。</p><p>我开始觉得自己每天工作中思考中的问题永远都是业务层面的问题。</p><p>每一次解决的问题都是在互联网中的一个角落别人曾经光顾过的地方。</p><p>每一次有新的发现不过是几年前别人更新的博客或者文档。</p><p>许久。</p><p>我都没有当年那种</p><p>我要学会这个技术，学会了我出去面试就能多要1k的感觉。</p><p>那种感觉仿佛就像 <code>希望</code> ，在沉浮的互联网中的灯塔一般。让我觉得仿佛真的只要自己努力，其实无论学历、智商、经历等差距都是可以被抹平的。</p><p>就像小时候的孩子王突然有一天发现小伙伴们都不见了。</p><p>我弄丢了我的冲劲，我开始思考更多除了写代码之外的事。</p><p>如果说这篇年中总结是希望记录下来这半年我的成长，我觉得更多的是思想上的成长。</p><p>另外感觉就是自己更加的重视亲情了。</p><p>如果还有什么成长的话大概就是这半年在公司的团队沟通配合等方面有了更多的成长吧。</p><p>感觉自己还是学到了很多自己想要的技能的。</p><p>嗯，另外还有《清醒思考的艺术》《活出生命的意义》等7本书，《JavaScript设计模式》等五本技术书，N部纪录片/电影，也写了不少博客。</p><p><strong>前路愈艰，且歌且行。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间来到了2019年中，又是一篇年中总结。我曾想过要不就不写了，反正自己的小破站又没啥流量，拖了也没人催更…&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="http://iliujy.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>在Vue中编写单元测试</title>
    <link href="http://iliujy.top/2019/06/04/%E5%9C%A8Vue%E4%B8%AD%E7%BC%96%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://iliujy.top/2019/06/04/在Vue中编写单元测试/</id>
    <published>2019-06-04T10:46:04.000Z</published>
    <updated>2021-10-28T08:24:36.883Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在写 Vue 的单元测试，发现 Vue 其实本身的单元测试并不是很难写但是项目中的各种奇奇怪怪的配置项简直令人抓狂。</p><a id="more"></a><h2 id="首先为什么要写单元测试"><a href="#首先为什么要写单元测试" class="headerlink" title="首先为什么要写单元测试"></a>首先为什么要写单元测试</h2><ul><li>帮助我们优化代码</li><li>节省手动测试的时间</li><li>减少开发新功能的时候的BUG</li><li>促进项目迭代</li><li>开源项目必备</li></ul><p>无论是哪一种都是我们在项目中做单元测试的初始动力。</p><h2 id="如何写一个单元测试"><a href="#如何写一个单元测试" class="headerlink" title="如何写一个单元测试"></a>如何写一个单元测试</h2><p>在动手之前你可能会遇到在项目中如何编写一份单元测试的小小阻力，那么我们一起来看如何从零开始编写一个项目的单元测试。</p><p>1.首先本文基于 Vue 官方推荐的单元测试 Vue-unit-test 来进行，如果你有自己习惯的其他的测试框架可以结合本文来尝试。</p><p>2.配置项，此处因为配置项格外的多所以我先把我项目中的配置贴出来然后讲解。</p><p>首先我是把jest的配置写到了packgae.json中，当然你可以通过在根目录新建一个 <code>jest.config.js</code> 来写jest的配置项<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jest"</span>: &#123;</span><br><span class="line">  <span class="string">"moduleFileExtensions"</span>: [</span><br><span class="line">    <span class="string">"js"</span>,</span><br><span class="line">    <span class="string">"jsx"</span>,</span><br><span class="line">    <span class="string">"json"</span>,</span><br><span class="line">    <span class="string">"vue"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"transform"</span>: &#123;</span><br><span class="line">    <span class="string">"^.+\\.vue$"</span>: <span class="string">"vue-jest"</span>,</span><br><span class="line">    <span class="string">".+\\.(css|styl|less|sass|scss|svg|png|jpg|ttf|woff|woff2)$"</span>: <span class="string">"jest-transform-stub"</span>,</span><br><span class="line">    <span class="string">"^.+\\.js?$"</span>: <span class="string">"babel-jest"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"moduleNameMapper"</span>: &#123;</span><br><span class="line">    <span class="string">"^@/(.*)$"</span>: <span class="string">"&lt;rootDir&gt;/packages/$1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"snapshotSerializers"</span>: [</span><br><span class="line">    <span class="string">"jest-serializer-vue"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"testMatch"</span>: [</span><br><span class="line">    <span class="string">"**/test/unit/**/*.spec.(js|jsx|ts|tsx)|**/__test__/*.(js|jsx|ts|tsx)"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"testURL"</span>: <span class="string">"http://localhost/"</span>,</span><br><span class="line">  <span class="string">"collectCoverage"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"collectCoverageFrom"</span>: [</span><br><span class="line">    <span class="string">"**/packages/**/*.vue"</span>,</span><br><span class="line">    <span class="string">"!**/node_modules/**"</span>,</span><br><span class="line">    <span class="string">"!**packages/main.js**"</span>,</span><br><span class="line">    <span class="string">"!**packages/router.js**"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整的package.json的 <a href="https://github.com/holylovelqq/vue-unit-test-with-jest/blob/master/vue-unit-test-with-jest/package.json" target="_blank" rel="noopener">项目地址</a>。</p><p>其次是项目中需要配置babel,这里需要讲一下的是项目中使用的是 <code>&quot;babel-core&quot;: &quot;7.0.0-bridge.0&quot;,</code> 此babel与6.X版本冲突，所以 如果使用了其他 配置项的可能需要 这个 <a href="https://github.com/vuejs/vue-cli/issues/1584" target="_blank" rel="noopener">issue</a>。</p><p>在做好了这些之后你只需要在根目录新建一个 <code>test</code> 文件夹并且在其中 <code>unit</code> 文件夹下新建 testName.spec.js 的文件即可开始测试之旅。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://vue-test-utils.vuejs.org/zh/guides/" target="_blank" rel="noopener">https://vue-test-utils.vuejs.org/zh/guides/</a><br><a href="https://vue-test-utils.vuejs.org/zh/guides/" target="_blank" rel="noopener">vue-test-utils</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在写 Vue 的单元测试，发现 Vue 其实本身的单元测试并不是很难写但是项目中的各种奇奇怪怪的配置项简直令人抓狂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://iliujy.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>计算机科学中的幂等</title>
    <link href="http://iliujy.top/2019/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%B9%82%E7%AD%89/"/>
    <id>http://iliujy.top/2019/05/05/计算机科学中的幂等/</id>
    <published>2019-05-05T06:48:51.000Z</published>
    <updated>2021-10-28T08:24:36.893Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写后台的页面的一些功能，发现忽略了很多细节的操作，例如像幂等的操作就被忽略了。</p><a id="more"></a><h2 id="幂等"><a href="#幂等" class="headerlink" title="幂等"></a>幂等</h2><p>计算机科学中的幂等大致可以理解为：一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。</p><p>幂等在分布式系统中尤为重要，因为网络通讯的情况下如果重发了请求在没有做幂等操作的情况下可能就会造成很大的影响。</p><p>那么在前端的优化中，幂等也是很重要的一点。</p><p>比如前端的表单 or button 在没有修改的情况下或者是在短时间内连续的点击那么很有可能是用户的误操作或者 <code>点击暴躁症</code> 的表现。</p><p>在这种情况下即使后端做了这种请求的判断前端也应该在用户交互的层面上直接return 掉用户 “多余” 的操作。</p><p>在实际开发中可能会遇到 Object 和 Array 的判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断数组相等</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">equalsArray</span>(<span class="params">target, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!array || !target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target.length !== array.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; target.length; i++) &#123;</span><br><span class="line">        <span class="comment">// nested arrays</span></span><br><span class="line">        <span class="keyword">if</span> (target[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; array[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!equalsArray(target[i], array[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target[i] !== array[i]) &#123;</span><br><span class="line">            <span class="comment">// two different object instances will never be equal</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断对象相等</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">obj1,obj2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(obj1).length !== <span class="built_in">Object</span>.keys(obj2).length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj2.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Object</span>.is(obj1[key], obj2[key]))&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写后台的页面的一些功能，发现忽略了很多细节的操作，例如像幂等的操作就被忽略了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Golang编译WebAssembly</title>
    <link href="http://iliujy.top/2019/04/17/%E4%BD%BF%E7%94%A8Golang%E7%BC%96%E8%AF%91WebAssembly/"/>
    <id>http://iliujy.top/2019/04/17/使用Golang编译WebAssembly/</id>
    <published>2019-04-17T15:04:08.000Z</published>
    <updated>2021-10-28T08:24:36.880Z</updated>
    
    <content type="html"><![CDATA[<p>WebAssembly 在前端的应用中得到了广泛的实践，来讲下使用 Golang 编译成 WebAssembly 的方法。</p><a id="more"></a><p>首先准备一份需要编译成 WebAssembly 的 Go 文件，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">4</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该文件的目录下直接使用 Go 自带的命令， 将 GO 文件编译成 wasm 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=js GOARCH=wasm go build -o filename.wasm</span><br></pre></td></tr></table></figure><p>然后在目录下可以看到一份以 <code>.wasm</code> 结尾的文件，这份文件就是编译出来我们需要在前端引入的 WebAssembly，因为 WebAssembly 与 JS 的通讯需要引入一个 50k-100k 的 JavaScript 类库作为基础设施，Go 本身提供了这个库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &quot;$GOROOT/misc/wasm/wasm_exec.js&quot; /yourpath</span><br></pre></td></tr></table></figure><p>然后就可以新建一份 html 文件来引入刚编译的 wasm 文件了，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./wasm_exec.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> go = <span class="keyword">new</span> Go()</span></span><br><span class="line"><span class="javascript">      WebAssembly.instantiateStreaming(fetch(<span class="string">"filename.wasm"</span>), go.importObject).</span></span><br><span class="line"><span class="javascript">        then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">          go.run(result.instance)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然如果你像我一样使用的是python 自带的 http server 服务的话还需要配置一下让 静态资源支持 wasm文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/etc/mime.types</span><br></pre></td></tr></table></figure><p>然后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application/wasm    wasm</span><br></pre></td></tr></table></figure><p>这样在 Chrome 中就不会出现报错了，便能愉快的访问自己本地搭建的测试 wasm 的地址了。</p><p>最后作为一个 Go 吹，还是要指出 由于Go是一种垃圾收集语言，因此整个运行时都在wasm二进制文件中。因此，<strong>二进制文件通常有几MB的大小</strong>。</p><p>比如像这个简单的几行 Go 代码编译出来的 wasm 文件就有 2.4M 大小。</p><p>相对于 C/C++ 这无疑是个巨大的缺点，另外 C/C++可以通过 Emscripten 编译成浏览器支持更广泛的 asm.js 。</p><p>希望以后 Golang 能对 wasm 的支持更棒吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebAssembly 在前端的应用中得到了广泛的实践，来讲下使用 Golang 编译成 WebAssembly 的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Go" scheme="http://iliujy.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>外面阳光正好</title>
    <link href="http://iliujy.top/2019/04/17/%E5%A4%96%E9%9D%A2%E9%98%B3%E5%85%89%E6%AD%A3%E5%A5%BD/"/>
    <id>http://iliujy.top/2019/04/17/外面阳光正好/</id>
    <published>2019-04-16T23:21:52.000Z</published>
    <updated>2021-10-28T08:24:36.883Z</updated>
    
    <content type="html"><![CDATA[<p>窗外阳光正好，春风微拂，你应当多出去走走。</p><a id="more"></a><p>最近看新闻，巴黎圣母院失火，全人类的文明珠宝在一场意外中牵动着每一个人的心弦。有幸并未造成完全无法挽回的损失，但木质结构的屋顶与著名的塔尖却被大火破坏。</p><p>巴黎圣母院的木质屋顶有半数来自11世纪 ～ 12世纪砍伐的大树。这样有着悠久历史的文明在一场大火中提醒着世人珍惜当下。</p><p>或许你从网络的高清图片中看到过巴黎圣母院，又或者你曾读过雨果的名著《巴黎圣母院》认识了敲钟人卡西莫多。</p><p>但你未曾去过，没有真正的去感受过这栋百年建筑的美丽，没看过玫瑰花床折射的缤纷阳光，没抬头欣赏过绝美的穹顶，也未曾见过木质轻巧又高挑的哥特建筑。</p><p>引用《心灵捕手》中的一段：</p><blockquote><p>你只是个孩子，你根本不晓得你在说什么。问你艺术，你可能会提出艺术书籍中的粗浅论调，有关米开朗基罗，你知道很多，他的满腔政治热情，他与教皇相交莫逆，和他的耽于性爱，你对他很清楚吧？<strong>但你知道西斯汀教堂的气味吗？你没试过站在那儿，昂首眺望天花板上的名画吧？你肯定未见过吧？</strong> 如果我问关于女人的事，你大可以向我如数家珍，你可能上过几次床，但你没法说出在女人身旁醒来时，那份内心真正的喜悦。你年轻彪悍，我如果和你谈论战争，你大可以会向我大抛莎士比亚，背诵“共赴战场，亲爱的朋友“，但你从未亲临战阵，未试过把挚友的头拥入怀里，看着他吸着最后一口气，凝望着你，向你求助。我问你何为爱情，你可能会吟风弄月，但你未试过全情投入真心倾倒。</p></blockquote><p>真正的遗憾就像是还未见过百年的建筑，无情的大火便在时光中增添了一道无法磨灭的伤痕。</p><p>就像温莎城堡曾遭遇火灾之后在历史长留下的那句话一样：“我们所建造的事物，我们也可以重建”</p><p>人类的历史不会一位一场大火就被吞噬殆尽，但却带走了时光。</p><p>你不会因为这场意外就永远的错失了与巴黎圣母院相见的机会。</p><p>但重建工作会持续很长的一段时间，在此期间只能等待在时光中一点点的修复大火带来的伤痕。</p><p>其实谈到这里还有一个很大的遗憾。</p><p>还记得之前很喜欢的一个乐队 林肯公园，在15年的时候曾来中国有一次巡演，还记得当时听到消息的喜悦，却最终因为种种原因都没选择去看现场。</p><p>当时想着下次一定补上</p><p>可后来听闻乐队主唱离世的消息。</p><p>你看啊，时光从来不会要求你什么</p><p>即使你没去你最喜欢的乐队现场</p><p>到头来当初没珍惜的后来也没机会补上。</p><p>所以，趁现在年轻力壮、外面阳光正好，还是多出去走走满足下自己的小愿望，别留下太多的遗憾给时光。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;窗外阳光正好，春风微拂，你应当多出去走走。&lt;/p&gt;
    
    </summary>
    
    
      <category term="短文" scheme="http://iliujy.top/tags/%E7%9F%AD%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>每月分享第19期</title>
    <link href="http://iliujy.top/2019/04/09/%E6%AF%8F%E6%9C%88%E5%88%86%E4%BA%AB%E7%AC%AC19%E6%9C%9F/"/>
    <id>http://iliujy.top/2019/04/09/每月分享第19期/</id>
    <published>2019-04-09T10:47:42.000Z</published>
    <updated>2021-10-28T08:24:36.892Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎<a href="https://github.com/MriLiuJY/MriLiuJY.github.io" target="_blank" rel="noopener">投稿</a>提交Issue。</p><a id="more"></a><h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><p>【社科院报告预警！养老金照这么花下去，没等80后退休就会花光】报告预测，未来30年我国的制度赡养率翻倍，今年当期结余总额超千亿元，但到2028年可能会首次出现负数。此外，城镇职工基本养老金累计结余到2027年有望达到峰值约7万亿元，到2035年有耗尽累计结余的可能性。到2050年，当期结余可能达到负11.28万亿元。当期收不抵支省份今年恐达16个，到2050年前后几乎是1个缴费者需要赡养一个离退休者，建议尽快出台延迟退休方案。</p><p>中国首条5G智能制造生产线在武汉启动】4月11日，全天候科技讯，据上证报报道，中国移动湖北公司与中国信科集团昨日在湖北武汉共同发布了“5G智慧工厂”项目，这也是我国首条5G智能制造生产线。该生产线位于中国信科虹信通信天馈生产基地，主要生产通信设备天线。生产线上，机械手自动焊接、组装，并通过5G网络随时上传工作状态，云端平台统一管理，几乎无需人为干预。</p><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p><a href="https://mp.weixin.qq.com/s/7EMFN_3DQs2MkkHHmBYpZw" target="_blank" rel="noopener">我们用WebAssembly将Web App速度提升了20倍！</a>WebAssembly 是除 JavaScript 之外另一门可以在浏览器上运行的语言，其他语言（如 C/C++/Rust）也可以被编译成 WebAssembly 在浏览器上运行。WebAssembly 是静态类型的语言，使用线性内存，并保存成紧凑的二进制格式，所以速度非常快，可以以“接近原生”的速度运行代码（与从本地命令行运行程序的速度相当）。</p><p><a href="https://zhuanlan.zhihu.com/p/25669120" target="_blank" rel="noopener">JavaScript Just-in-time (JIT) 工作原理</a>JavaScript 的启动比较缓慢，但是通过 JIT 可以使其变快，那么 JIT 是如何起作用的呢？</p><p><a href="https://segmentfault.com/a/1190000016231512" target="_blank" rel="noopener">AST抽象语法树</a>抽象语法树（AST），是一个非常基础而重要的知识点，但国内的文档却几乎一片空白。本文将带大家从底层了解AST,并且通过发布一个小型前端工具，来带大家了解AST的强大功能。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>这里分享本周我看的一些电影/书籍和一些感受</p><p>《程序员的自我修养》：关于这本小书怎么说呢，看完并没有特别多的共鸣，更像是一本讲了很多职场小技巧的小书，只是主角换成了程序员，网上有个 <a href="https://segmentfault.com/a/1190000013972995" target="_blank" rel="noopener">大概的总结</a> 我觉得还不错，可以酌情参考一下</p><p>一般般推荐系列 《拯救大兵瑞恩》</p><h1 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h1><p>本周参与了公司GT day的一个关于设计入门的分享，想起了之前看的《穿普拉达的女王》中 米兰达对 安迪穿的一件蓝色毛衣的评价：</p><blockquote><p>首先你分不清那是蓝色还是青绿色还是琉璃色，其实它是天蓝色，你也不知道，在我印象里2002年的发布会上第一次出现了天蓝色的礼服，继而有人展现了天蓝色军服系列，天蓝色就出现在了８个设计师的发布会上，随后风靡于世界各大高级卖场再到街头连锁店，最后你在一个廉价的卖场里找到了它，<strong>你以为是你经过精心挑选买了它，以为你的选择与时尚产业无关，事实却并非如此，是这间屋子里的人，在一堆这样的东西里替你做了选择</strong>。</p></blockquote><p>看似无关的时尚与设计其实在我们的生活中对我们的影响却是方方面面的。</p><p>比如文字的排版，又比如工业设计，室内设计对人感官的影响，设计在或明显或隐藏着的地方影响着我们的方方面面。</p><p>未来会不会人类将无法区分一件艺术品是人类创造的还是 AI 创造的，然后走上了 AI 主导了人类审美的潮流这样的事。</p><p>未来世界的构建又将建立在什么基础之上呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎&lt;a href=&quot;https://github.com/MriLiuJY/MriLiuJY.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;投稿&lt;/a&gt;提交Issue。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://iliujy.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 3.0中webpack打包优化</title>
    <link href="http://iliujy.top/2019/04/04/vue-cli-3-0%E4%B8%ADwebpack%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"/>
    <id>http://iliujy.top/2019/04/04/vue-cli-3-0中webpack打包优化/</id>
    <published>2019-04-04T13:06:01.000Z</published>
    <updated>2021-10-28T08:24:36.879Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来想写一篇关于 <code>Webpack</code> 优化的博客，最近正好做了vue-cli 3.0中关于webpack 打包的优化正好来记录一下。</p><a id="more"></a><p>最近在整理季度的优化代码，然后发现了一个项目中集成了原来 4 - 5个管理后台的大型项目在 webpack 优化方面做的很一般。</p><p><img src="http://pohm750jw.bkt.clouddn.com/image/first_js.png" alt="未优化打包js" title="未优化打包js"></p><p><img src="http://pohm750jw.bkt.clouddn.com/image/first_css.png" alt="未优化打包css" title="未优化打包css"></p><p>由上面的图可以看出来不仅 <code>vendors</code> 打包体积到了 1300+ kb 而且 多个 <code>chunk</code> 体积在Gzip 之后也大于240kb 根据webpack 的建议 大于 240 kb的文件是要进行拆分的。</p><p>还可以看出来在项目中不仅js 打包单个文件的体积过大。而且存在 为抽取公共部分组件、css / js 打包之后文件过多的问题。</p><p>打包了很多小的css文件不仅不利于网页的加载，大量的时间耗费在 http 请求上。而且相互依赖的 css 会造成网页在解析的过程中不断的触发重绘，这将对性能造成极大的影响。</p><p>那么明确了项目中存在的问题之后我们来着手解决。</p><p>首先在开始前我们需要足够的了解项目的webpack默认配置</p><p>在vue-cli3.0的项目中使用 <code>vue inspect &gt; output.js</code> 来输出一份当前webpack的配置文件。</p><p>这个命令是我们优化webpack配置项的基础。</p><p>然后我们需要借助 <code>webpack-bundle-analyzer</code> 来看下项目打包构建的过程中引用了哪些包和具体的文件size。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  config</span><br><span class="line">    .plugin(<span class="string">'webpack-bundle-analyzer'</span>)</span><br><span class="line">    .use(<span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在线项目中直接 <code>npm run serve || npm run build</code> 即可打开一份当前项目引用资源分析的页面。 </p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>另外在此要讲一下的是，vue为了降低入门难度在vuecli3.0之后的版本中 vue对webpack的配置文件都默认隐藏了，因为大部分的功能都默认成开箱即用。</p><p>vue对webpack的配置的封装可以 <a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener">参考</a> ，文档中出现的具体的项都可以直接配置，单如果需要更灵活的使用webpack的配置，就需要修改 <code>configureWebpack</code> 或者使用 <code>chainWebpack</code> 做修改（chainWebpack 加大了学习成本）</p><p>由于vuecli 默认配置的webpack中是打开了 SourceMap 的，而服务端的更新通常都是增量更新，前端每次在打包的时候输出的SourceMap 文件会造成服务端文件冗余。并且在开启 SourceMap 之后build 速度会慢下来很多。</p><p>由于vue自身优化了配置项，SourceMap 就处于其中，所以直接在配置中设置即可关闭。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h2><p>在有了项目分析和配置项文件之后就可以着手解决打包优化的问题了。首先是JS单个文件 size 过大，因为在vue-cli3.0 中使用的是 <code>webapck: 4.26.1</code> 所以 <code>CommonChunkSplit</code> 已经被删掉了，取代的是 <code>splitChunks</code>。</p><p>然后我们需要先抽取代码中的重复引用的部分公共代码,那么首先我们来看文档中对文件 size 的优化的配置 <code>minSize</code> 代表单个文件最大的size。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cacheGroups: &#123;</span><br><span class="line">  common: &#123;</span><br><span class="line">    name: <span class="string">"chunk-common"</span>, <span class="comment">// 抽取公共文件的名字</span></span><br><span class="line">    minChunks: <span class="number">2</span>, <span class="comment">// 最小被引用多少次则被抽取</span></span><br><span class="line">    minSize: <span class="number">30000</span> <span class="comment">// 单个文件最小size</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外在项目中有很多的代码体积来自 console，这些只在开发中使用的代码不应该发布到线上，所以直接使用 <code>UglifyJsPlugin</code> 删除console 文件体积减少24kb+</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">  uglifyOptions: &#123;</span><br><span class="line">    compress: &#123;</span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      drop_console: <span class="literal">true</span>,</span><br><span class="line">      pure_funcs: [<span class="string">'console.log'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  sourceMap: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="构建优化"><a href="#构建优化" class="headerlink" title="构建优化"></a>构建优化</h2><p>构建优化上我们使用了 happypack 来利用多核CPU 加快打包的速度。</p><p>最终配置的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.optimization = &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            minSize: <span class="number">1000000</span>, <span class="comment">// 单个文件的最小size</span></span><br><span class="line">            maxSize: <span class="number">2000000</span>, <span class="comment">// 单个文件最大的size</span></span><br><span class="line">            minChunks: <span class="number">2</span>,     <span class="comment">// 最小被引用</span></span><br><span class="line">            maxAsyncRequests: <span class="number">5</span>,  <span class="comment">// 首页加载资源</span></span><br><span class="line">            maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">            automaticNameDelimiter: <span class="string">'~'</span>, <span class="comment">// 打包文件自定义的链接符</span></span><br><span class="line">            name: <span class="literal">true</span>,</span><br><span class="line">            chunks: <span class="string">'async'</span>, <span class="comment">// initial(初始块)、async(按需加载块)、all(默认，全部块)</span></span><br><span class="line">            <span class="comment">// 这里需要注意的是如果使用initial 会将首页需要的依赖和项目本身的依赖打包2次增大文件体积</span></span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    test(<span class="built_in">module</span>) &#123;</span><br><span class="line">                        <span class="keyword">let</span> path = <span class="built_in">module</span>.resource</span><br><span class="line">                        <span class="keyword">if</span> (!path) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                        path = path.replace(<span class="regexp">/\\/g</span>, <span class="string">'/'</span>)</span><br><span class="line">                        <span class="keyword">let</span> isNeed = path &amp;&amp;</span><br><span class="line">                            /node_modules/.test(path) &amp;&amp;</span><br><span class="line">                            /node_modules\/(?!vuetify)/.test(path) &amp;&amp;</span><br><span class="line">                            /node_modules\/(?!muse)\n*<span class="regexp">/.test(path)</span></span><br><span class="line"><span class="regexp">                        if (!isNeed &amp;&amp; path.indexOf('node_modules') &gt; -1) &#123;</span></span><br><span class="line"><span class="regexp">                            console.log('vendor not need::', path, isNeed)</span></span><br><span class="line"><span class="regexp">                        &#125;</span></span><br><span class="line"><span class="regexp">                        return isNeed</span></span><br><span class="line"><span class="regexp">                    &#125;,</span></span><br><span class="line"><span class="regexp">                    name: "chunk-vendors",</span></span><br><span class="line"><span class="regexp">                    priority: 10,</span></span><br><span class="line"><span class="regexp">                    enforce: true</span></span><br><span class="line"><span class="regexp">                &#125;,</span></span><br><span class="line"><span class="regexp">                vue: &#123;</span></span><br><span class="line"><span class="regexp">                    test(module) &#123;</span></span><br><span class="line"><span class="regexp">                        let path = module.resource</span></span><br><span class="line"><span class="regexp">                        if (!path) return false</span></span><br><span class="line"><span class="regexp">                        path = path.replace(/</span>\\/g, <span class="string">'/'</span>)</span><br><span class="line">                        <span class="comment">// return path &amp;&amp; path.indexOf('node_modules') &gt; -1 &amp;&amp; path.indexOf('vuetify') &gt; -1</span></span><br><span class="line">                        <span class="keyword">return</span> path &amp;&amp; <span class="regexp">/node_modules\/vue/</span>.test(path)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    name: <span class="string">"chunk-vuetify"</span>,</span><br><span class="line">                    priority: <span class="number">9</span>,</span><br><span class="line">                    enforce: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                echarts: &#123;</span><br><span class="line">                    <span class="comment">// test: (/node_modules/ &amp;&amp; /muse\n*/),</span></span><br><span class="line">                    test(<span class="built_in">module</span>) &#123;</span><br><span class="line">                        <span class="keyword">let</span> path = <span class="built_in">module</span>.resource</span><br><span class="line">                        <span class="keyword">if</span> (!path) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                        path = path.replace(<span class="regexp">/\\/g</span>, <span class="string">'/'</span>)</span><br><span class="line">                        <span class="keyword">return</span> path &amp;&amp; <span class="regexp">/node_modules\/echarts\n*/</span>.test(path)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    name: <span class="string">"chunk-echarts"</span>,</span><br><span class="line">                    priority: <span class="number">8</span>,</span><br><span class="line">                    enforce: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                common: &#123;</span><br><span class="line">                    name: <span class="string">"chunk-common"</span>,</span><br><span class="line">                    minChunks: <span class="number">2</span>,</span><br><span class="line">                    minSize: <span class="number">30000</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来想写一篇关于 &lt;code&gt;Webpack&lt;/code&gt; 优化的博客，最近正好做了vue-cli 3.0中关于webpack 打包的优化正好来记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Webpack" scheme="http://iliujy.top/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第18期</title>
    <link href="http://iliujy.top/2019/04/01/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC18%E6%9C%9F/"/>
    <id>http://iliujy.top/2019/04/01/每周分享第18期/</id>
    <published>2019-04-01T04:51:59.000Z</published>
    <updated>2021-10-28T08:24:36.888Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎<a href="https://github.com/MriLiuJY/MriLiuJY.github.io" target="_blank" rel="noopener">投稿</a>提交Issue。</p><a id="more"></a><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>这里分享本周我看的一些电影/书籍和一些感受</p><p>《调音师》：什么是生命，这取决于肝脏。整部电影围绕着一点开始展开叙述，不仅在喜剧中穿插了许多关于人性的讨论，而且对人性的刻画也格外的深入。</p><p>一般般推荐系列 《波西米亚狂想曲》</p><h1 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h1><blockquote><p>前几天，我听一个广播节目。主持人问，现在很多人开网约车，这样能赚多少钱，能够赚到大钱吗？<br> 这个问题很容易回答，答案就是不能。出租车司机的收入，主要由营业时间的长短决定。基本上，一天开12个小时，就是比开6个小时，收入高出一倍。每天只有24个小时，因此收入存在上限，不可能偏离平均水平很远。<br> 出租车是”时间换收入”的典型行业，投入的时间越多，收入越高，在家休息就没收入。很多行业都属于”时间换收入”，所有此类行业都赚不到大钱。因为你能用来交换的时间是有限的，而且进入中年以后，你就拿不出更多的时间来交换。开出租车赚零花钱，或者作为短期过渡，这是没问题的，但作为终身职业是很糟糕的。<br> 我觉得，越来越多的程序员正在落入这个陷井，用编码的时间换取收入。只有不停地做项目，才能拿到钱。项目做得越多，收入越高。这个项目开发完了，公司又让他去干下一个项目。 忙了好几年，项目完成了一大堆，但是自己什么也没留下，以后的收入还要取决于从零开始的新项目。这样的话，你跟出租车司机有何两样，哪一天你不写代码了，不是照样没收入。<br> 那些赚到大钱的人，没有一个是靠时间换取收入的。他们要么通过积累资产致富，要么购买他人的时间，为自己创造财富。你应该警惕，不要落入”时间换取收入”的陷井，不要只顾着为别人生产代码，而要注意积累自己的资产，以及适时开展属于自己的业务。</p></blockquote><p> 关于上面这段的观点在 <a href="https://mriliujy.github.io/2019/03/05/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC13%E6%9C%9F/" target="_blank" rel="noopener">之前的博客中</a> 有提到过。现在社会上很多的人正在从各行各业中向程序员转行，一方面每天在写字楼处于白领的工作状态，另一方面程序员相对较高的工资成了大家纷纷转行的主要原因。</p><p> 但是是否真的考虑过未来的出路，现在的程序员很像当年的石油工人，一个行业的火热建立在全球都对该行业的需求中，之前是对原油的需求，现在是互联网时代的需求。</p><p> 但是这种需求往往是替代性很强的，因为这种行业中的工作岗位都会随着生产力工具的提高而逐渐变的没有那么大的需求。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎&lt;a href=&quot;https://github.com/MriLiuJY/MriLiuJY.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;投稿&lt;/a&gt;提交Issue。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://iliujy.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第17期</title>
    <link href="http://iliujy.top/2019/03/26/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC17%E6%9C%9F/"/>
    <id>http://iliujy.top/2019/03/26/每周分享第17期/</id>
    <published>2019-03-26T10:07:13.000Z</published>
    <updated>2021-10-28T08:24:36.887Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎<a href="https://github.com/MriLiuJY/MriLiuJY.github.io" target="_blank" rel="noopener">投稿</a>提交Issue。</p><a id="more"></a><h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><p>1.<strong>华为发布P30 pro 刷新DxOMark 评分</strong> 近年来各大手机厂商在角逐手机的各个领域，从创新的机械模组到怪兽级的摄像功能，各大手机厂商都在纷纷求追现在5G 来临前的一波爆点。华为在3月的发布会上带来的是P系列中迄今为止最强劲的摄像能力。以及搭配屏下指纹、IP68防尘防水的 真旗舰 大作。</p><p>2.<strong>优酷否认裁员</strong>：阿里大文娱新财年将招聘超 1800 人。 针对自媒体爆料称优酷裁员的消息，阿里大文娱表示，此前已做过公开辟谣，不存在裁员，未来一年公司计划在影视内容制作、互联网产品策划、技术研发等方向开放招聘超过 1800 名新员工。</p><p>3.<strong>比特币交易量绝大多数为虚假</strong> 本周，比特币资产管理公司Bitwise Asset Management对81个比特币交易所在3月份其中4天内的交易活动进行了分析，研究结果表明，绝大部分的比特币交易量很可能是由交易所人为创造的。</p><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p><a href="https://mp.weixin.qq.com/s/8jg4X-cymkIpn0zVaMDf6Q" target="_blank" rel="noopener">深入理解浏览器的缓存机制</a> 文章通过缓存位置、缓存策略以及实际场景应用缓存策略来探讨浏览器缓存机制。</p><h1 id="经济"><a href="#经济" class="headerlink" title="经济"></a>经济</h1><p>1.<strong>华尔街裁员风潮更盛：媒体称小摩野村均将裁员上百</strong> ，摩根大通将裁撤资产和财富管理部门的几百名员工；野村裁员涉及交易和投行部门，主要可能来自过去十年亏损数十亿美元的欧洲业务。上周工会警告，德国两大银行合并可能导致裁员多达3万人。</p><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>这里分享本周我看的一些电影/书籍和一些感受</p><p>《末代皇帝》：讲述大清最后一任皇帝溥仪的人生与中国封建制度的瓦解。回过头去看这竟然是一位外国人拍摄的中国故事，却讲述的那么令人唏嘘，《末代皇帝》也是中国政府授权许可真正在故宫取景实拍的电影。</p><p><img src="http://puv83hfjy.bkt.clouddn.com/github/MonitorFE.gif" alt="末代皇帝" title="末代皇帝"></p><h1 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h1><p><a href="http://www.geekpark.net/news/239481" target="_blank" rel="noopener">Google 的云游戏平台</a> 借助 Stadia，数据中心就是你的平台。游戏机不会再成为开发者和玩家的限制。让下一代游戏抛弃专业主机，依靠云的算力提供随时随地的游戏体验，是 Google 推出 Project Stream 的赌注。</p><p><a href="http://www.geekpark.net/news/239615" target="_blank" rel="noopener">Google 用机器学习对付「杠精」</a> 这个小工具来自 Jigsaw 公司，它的前身为 Google Ideas，是 Google 创建的一个技术孵化器，致力于用技术解决网络暴力、言论自由、信息透明等难题。Tune 的作用就是屏蔽恶毒评论。它目前支持 YouTube、Twitter、Facebook、Reddit、Disqus五个平台，开启之后，用户会看到一个调整恶毒程度的按钮，有 quit、low、medium、loud、blaring 五档，级别越高，可以看到的恶毒评论越多，反之则是一个安静友善的网络环境。</p><p><a href="https://www.zhihu.com/question/37245305/answer/594992846" target="_blank" rel="noopener">中国的发展与打破东亚地狱模式</a> 东亚地狱模式，一个来自于产业的狭窄性，一个来自于支出结构的不合理性。真正值钱的资源是人力资源，而人力资源又依赖于教育和产业才能变现，没有教育，人口就无法变成人力资源，没有产业，人力资源就没有用武之地，就只能在有限的几个产业里面高烈度竞争，极大的降低效率，导致累死累活最后获得的却不成比例。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录过去一周，我看到的值得分享的东西。每周不定期发布。欢迎&lt;a href=&quot;https://github.com/MriLiuJY/MriLiuJY.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;投稿&lt;/a&gt;提交Issue。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://iliujy.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
